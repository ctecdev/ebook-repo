# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Driver
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

# Connection url for the database "netgloo_blog"
spring.datasource.url=jdbc:mysql://localhost:3306/esd_2015_ctecdev?createDatabaseIfNotExist=true

# Username and password
spring.datasource.username=root
spring.datasource.password=root

# ===============================
# = JPA / HIBERNATE
# ===============================

# Show or not log for each sql query
spring.jpa.show-sql = true

# Ddl auto must be set to "create" to ensure that Hibernate will run the
# import.sql file at application startup
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

# Format SQL
spring.jpa.hibernate.format_sql=true

# CharSet, Encoding
spring.jpa.hibernate.connection.CharSet=utf8
spring.jpa.hibernate.connection.characterEncoding=utf8
spring.jpa.hibernate.default-character-set=utf8
spring.jpa.hibernate.connection.useUnicode=true


# ===============================
# = HIBERNATE SEARCH
# ===============================

# Spring Data JPA will take any properties under spring.jpa.properties.* and 
# pass them along (with the prefix stripped) once the EntityManagerFactory is 
# created.

# Specify the DirectoryProvider to use (the Lucene Directory)
spring.jpa.properties.hibernate.search.store.FSMasterDirectoryProvider
spring.jpa.properties.hibernate.search.default.directory_provider = filesystem

# Using the filesystem DirectoryProvider you also have to specify the default
# base directory for all indexes (make sure that the application have write
# permissions on such directory)
spring.jpa.properties.hibernate.search.default.indexBase = ./src/main/resources/var/lucene/indexes

# For instance you may leave this to the default (false)
# during testing to identify the sortable fields required for your queries
# and set it to true in production environments to fall back to index uninverting
# for uncovered sorts accidentally left over.
spring.jpa.hibernate.search.index_uninverting_allowed = false

# ===============================
# = THYMELEAF
# ===============================

#spring.thymeleaf.cache = false

# ===============================
# = MULTIPART DATA
# ===============================
#multipart.maxFileSize: 128MB
#multipart.maxRequestSize: 128MB
#spring.servlet.multipart.max-file-size=128MB
#spring.servlet.multipart.max-request-size=128MB
spring.http.multipart.max-file-size=128MB
spring.http.multipart.max-request-size=128MB